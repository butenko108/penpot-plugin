import type { PluginMessageEvent } from "./model";

// –û—Ç–∫—Ä—ã–≤–∞–µ–º UI –ø–ª–∞–≥–∏–Ω–∞
penpot.ui.open("Shape Exporter Plugin", `?theme=${penpot.theme}`, {
	width: 300,
	height: 200,
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
penpot.on("themechange", (theme) => {
	sendMessage({ type: "theme", content: theme });
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
penpot.on("selectionchange", () => {
	const selection = penpot.selection;
	const hasSelection = selection.length > 0;
	const selectedShape = hasSelection ? selection[0] : null;

	// –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
	let savedAnalysis = null;
	if (selectedShape) {
		const analysisData = selectedShape.getPluginData("claude-analysis");
		if (analysisData) {
			try {
				savedAnalysis = JSON.parse(analysisData);
			} catch (error) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error);
			}
		}
	}

	sendMessage({
		type: "selection-change",
		hasSelection,
		shapeInfo: selectedShape
			? {
					id: selectedShape.id,
					name: selectedShape.name || "Unnamed Shape",
					width: selectedShape.width,
					height: selectedShape.height,
					type: selectedShape.type,
				}
			: null,
		savedAnalysis,
	});
});

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç UI
penpot.ui.onMessage<PluginMessageEvent>((message) => {
	if (message.type === "export-and-analyze") {
		handleExportAndAnalyze();
	} else if (message.type === "create-text-shape") {
		handleCreateTextShape(message.analysisText, message.selectedShapeInfo);
	}
});

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ shape —Å –∞–Ω–∞–ª–∏–∑–æ–º (–Ω–æ–≤–∞—è)
async function handleExportAndAnalyze() {
	try {
		console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º...");
		const selection = penpot.selection;

		if (selection.length === 0) {
			sendMessage({
				type: "error",
				content: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
			});
			return;
		}

		const shape = selection[0];
		console.log("üéØ Shape –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º:", shape);

		sendMessage({ type: "export-start" });

		const uint8Array = await shape.export({
			type: "png",
			scale: 2,
		});
		console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", uint8Array);

		const fileName = `${shape.name || "shape"}_claude_${Date.now()}.png`;
		console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:", fileName);

		sendMessage({
			type: "export-and-analyze-complete",
			fileName,
			imageData: uint8Array,
			shapeInfo: {
				id: shape.id,
				name: shape.name || "Unnamed Shape",
				width: shape.width,
				height: shape.height,
				type: shape.type,
			},
		});
		console.log("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
	} catch (error) {
		console.error("üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º:", error);
		sendMessage({
			type: "error",
			content: `–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`,
		});
	}
}

// üëâ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∏–∑—É –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
async function handleCreateTextShape(analysisText: string, shapeInfo: any) {
	try {
		console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ Claude –≤ PluginData...");

		// –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π shape –ø–æ ID
		const allShapes = penpot.currentPage?.findShapes();
		const originalShape = allShapes?.find((s) => s.id === shapeInfo.id);

		if (!originalShape) {
			console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π shape");
			return;
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		const analysisData = {
			markdown: analysisText,
			timestamp: Date.now(),
			shapeInfo: {
				name: shapeInfo.name,
				type: shapeInfo.type,
			},
		};

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PluginData
		originalShape.setPluginData(
			"claude-analysis",
			JSON.stringify(analysisData),
		);

		console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PluginData");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
		sendMessage({
			type: "error",
			content: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`,
		});
	}
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function sendMessage(message: PluginMessageEvent) {
	penpot.ui.sendMessage(message);
}
