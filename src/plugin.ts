import type { PluginMessage, PluginToUIMessage } from "./model";
import { loadASTFromShape, saveASTToShape } from "./services/astStorageService";
import { AutoTagService } from "./services/auto-tag-service";
import { ExportService } from "./services/export-service";
import {
	loadReactComponentFromShape,
	removeReactComponentFromShape,
	saveReactComponentToShape,
} from "./services/reactComponentStorageService";
import { TagService } from "./services/tag-service";

// ==========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í
// ==========================================

// –°–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const tagService = new TagService();
const exportService = new ExportService();
const autoTagService = new AutoTagService();

// ==========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ì–ò–ù–ê
// ==========================================

// –û—Ç–∫—Ä—ã–≤–∞–µ–º UI –ø–ª–∞–≥–∏–Ω–∞
penpot.ui.open("Claude Analysis & Semantic Tagging", `?theme=${penpot.theme}`, {
	width: 350,
	height: 700,
});

// ==========================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô PENPOT
// ==========================================

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
penpot.on("themechange", (theme) => {
	sendMessage({ type: "theme", content: theme });
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö (–¥–ª—è –æ–±–µ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
penpot.on("selectionchange", () => {
	const selection = penpot.selection;
	const hasSelection = selection.length > 0;
	const selectedShape = hasSelection ? selection[0] : null;

	// –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Claude –∞–Ω–∞–ª–∏–∑
	let savedAnalysis = null;
	if (selectedShape) {
		const analysisData = selectedShape.getPluginData("claude-analysis");
		if (analysisData) {
			try {
				savedAnalysis = JSON.parse(analysisData);
			} catch (error) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error);
			}
		}
	}

	// –î–û–ë–ê–í–ò–¢–¨: –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π AST
	let savedAST = null;
	if (selectedShape) {
		const astData = loadASTFromShape(selectedShape);
		if (astData) {
			savedAST = astData;
			console.log("‚úÖ AST –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è shape:", selectedShape.id);
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Claude —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
	sendMessage({
		type: "selection-change",
		hasSelection,
		shapeInfo: selectedShape
			? {
					id: selectedShape.id,
					name: selectedShape.name || "Unnamed Shape",
					width: selectedShape.width,
					height: selectedShape.height,
					type: selectedShape.type,
				}
			: null,
		savedAnalysis,
	});

	// –î–û–ë–ê–í–ò–¢–¨: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AST –¥–∞–Ω–Ω—ã–µ –≤ UI
	sendMessage({
		type: "ast-loaded",
		data: savedAST,
	});

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Semantic —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
	const selectionData = selection.map((element) => ({
		id: element.id,
		name: element.name || "Unnamed",
		type: element.type,
	}));

	sendMessage({
		type: "selection-update",
		data: selectionData,
	});

	// –î–û–ë–ê–í–ò–¢–¨: –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
	let savedReactComponent = null;
	if (selectedShape) {
		const reactComponentData = loadReactComponentFromShape(selectedShape);
		if (reactComponentData) {
			savedReactComponent = {
				componentCode: reactComponentData.componentCode,
				timestamp: reactComponentData.timestamp,
			};
			console.log("‚úÖ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è shape:", selectedShape.id);
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Claude —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è)
	sendMessage({
		type: "selection-change",
		hasSelection,
		shapeInfo: selectedShape
			? {
					id: selectedShape.id,
					name: selectedShape.name || "Unnamed Shape",
					width: selectedShape.width,
					height: selectedShape.height,
					type: selectedShape.type,
				}
			: null,
		savedAnalysis,
	});

	// –î–û–ë–ê–í–ò–¢–¨: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AST –¥–∞–Ω–Ω—ã–µ –≤ UI (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è)
	sendMessage({
		type: "ast-loaded",
		data: savedAST,
	});

	// –î–û–ë–ê–í–ò–¢–¨: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ –≤ UI
	sendMessage({
		type: "react-component-loaded",
		data: savedReactComponent,
	});
});

// ==========================================
// –ó–ê–ì–†–£–ó–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–•
// ==========================================

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
function loadExistingTags(): void {
	const loadedTags = tagService.loadExistingTags();

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ UI
	sendMessage({
		type: "tags-loaded",
		data: loadedTags,
	});
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–≥–æ–≤
loadExistingTags();

// ==========================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –û–¢ UI
// ==========================================

penpot.ui.onMessage<PluginMessage>((message) => {
	switch (message.type) {
		// ==========================================
		// CLAUDE –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
		// ==========================================
		case "export-and-analyze":
			handleExportAndAnalyze();
			break;

		case "create-text-shape":
			handleCreateTextShape(message.analysisText, message.selectedShapeInfo);
			break;

		// ==========================================
		// SEMANTIC –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
		// ==========================================
		case "get-selection":
			sendSelectionUpdate();
			break;

		case "apply-tag":
			handleApplyTag(message.data);
			break;

		case "remove-tag":
			handleRemoveTag(message.data);
			break;

		case "export-tags":
			handleExportTags();
			break;

		case "auto-tag-selection":
			handleAutoTagSelection(message.data);
			break;

		case "generate-rich-json":
			handleGenerateRichJson();
			break;

		case "save-ast":
			handleSaveAST(message.data);
			break;

		case "clear-ast":
			handleClearAST(message.shapeId);
			break;

		case "generate-react-component":
			handleGenerateReactComponent(message.data);
			break;

		case "save-react-component":
			handleSaveReactComponent(message.data);
			break;

		case "clear-react-component":
			handleClearReactComponent(message.shapeId);
			break;

		default:
			console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", message.type);
	}
});

// ==========================================
// CLAUDE –§–£–ù–ö–¶–ò–ò
// ==========================================

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ shape —Å –∞–Ω–∞–ª–∏–∑–æ–º
async function handleExportAndAnalyze() {
	try {
		console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º...");
		const selection = penpot.selection;

		if (selection.length === 0) {
			sendMessage({
				type: "error",
				content: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
			});
			return;
		}

		const shape = selection[0];
		console.log("üéØ Shape –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º:", shape);

		sendMessage({ type: "export-start" });

		const uint8Array = await shape.export({
			type: "png",
			scale: 2,
		});
		console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", uint8Array);

		const fileName = `${shape.name || "shape"}_claude_${Date.now()}.png`;
		console.log("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:", fileName);

		sendMessage({
			type: "export-and-analyze-complete",
			fileName,
			imageData: uint8Array,
			shapeInfo: {
				id: shape.id,
				name: shape.name || "Unnamed Shape",
				width: shape.width,
				height: shape.height,
				type: shape.type,
			},
		});
		console.log("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
	} catch (error) {
		console.error("üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º:", error);
		sendMessage({
			type: "error",
			content: `–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`,
		});
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ Claude
async function handleCreateTextShape(analysisText: string, shapeInfo: any) {
	try {
		console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ Claude –≤ PluginData...");

		// –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π shape –ø–æ ID
		const allShapes = penpot.currentPage?.findShapes();
		const originalShape = allShapes?.find((s) => s.id === shapeInfo.id);

		if (!originalShape) {
			console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π shape");
			return;
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		const analysisData = {
			markdown: analysisText,
			timestamp: Date.now(),
			shapeInfo: {
				name: shapeInfo.name,
				type: shapeInfo.type,
			},
		};

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PluginData
		originalShape.setPluginData(
			"claude-analysis",
			JSON.stringify(analysisData),
		);

		console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PluginData");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
		sendMessage({
			type: "error",
			content: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`,
		});
	}
}

// ==========================================
// SEMANTIC –§–£–ù–ö–¶–ò–ò
// ==========================================

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
function sendSelectionUpdate(): void {
	const selection = penpot.selection;
	const selectionData = selection.map((element) => ({
		id: element.id,
		name: element.name || "Unnamed",
		type: element.type,
	}));

	sendMessage({
		type: "selection-update",
		data: selectionData,
	});
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–≥–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
function handleApplyTag(data: any): void {
	if (data) {
		const appliedTags = tagService.applyTagToElements(
			data.tag,
			data.properties,
			data.elementIds,
		);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
		appliedTags.forEach((tagData) => {
			sendMessage({
				type: "tag-applied",
				data: tagData,
			});
		});

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		tagService.saveTagsToFile();
	}
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function handleRemoveTag(data: any): void {
	if (data) {
		const removedIds = tagService.removeTagFromElements(data.elementIds);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
		removedIds.forEach((elementId) => {
			sendMessage({
				type: "tag-removed",
				data: { elementId },
			});
		});

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		tagService.saveTagsToFile();
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–≥–æ–≤
function handleExportTags(): void {
	const exportData = exportService.exportTags(tagService.getTaggedElements());

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
	sendMessage({
		type: "export-data",
		data: exportData,
	});
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function handleAutoTagSelection(data: any): void {
	if (data && data.elementIds) {
		const result = autoTagService.autoTagElements(
			data.elementIds,
			tagService.getTaggedElements(),
		);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
		result.appliedTags.forEach((tagData) => {
			sendMessage({
				type: "tag-applied",
				data: tagData,
			});
		});

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
		sendMessage({
			type: "auto-tag-complete",
			data: {
				taggedCount: result.taggedCount,
				processedElements: result.processedElements,
			},
		});

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		tagService.saveTagsToFile();
	}
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–≥–∞—Ç–æ–≥–æ JSON –¥–ª—è –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function handleGenerateRichJson(): void {
	const taggedElements = tagService.getTaggedElements();

	if (taggedElements.size === 0) {
		sendMessage({
			type: "rich-json-data",
			data: { metadata: {}, tree: [] },
		});
		return;
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ exportTags, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö shape
	const exportData = exportService.exportTags(taggedElements);

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–≥–∞—Ç—ã–µ JSON –¥–∞–Ω–Ω—ã–µ –≤ UI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
	sendMessage({
		type: "rich-json-data",
		data: exportData,
	});
}

// ==========================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ==========================================

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function sendMessage(message: PluginToUIMessage) {
	penpot.ui.sendMessage(message);
}

/**
 * Handle saving AST to shape plugin data
 */
function handleSaveAST(data: any): void {
	try {
		console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º AST –≤ Plugin Data...");

		// –ù–∞–π—Ç–∏ shape –ø–æ ID
		const shape = penpot.currentPage?.getShapeById(data.shapeId);
		if (!shape) {
			throw new Error("Shape –Ω–µ –Ω–∞–π–¥–µ–Ω");
		}

		// –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		const metadata = {
			shapeInfo: {
				id: data.shapeId,
				name: shape.name || "Unnamed",
			},
			htmlCode: data.metadata.htmlOutput,
			cssCode: data.metadata.cssOutput,
			metaInfo: data.metadata.metaInfo,
		};

		// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å AST –∏—Å–ø–æ–ª—å–∑—É—è storage service
		saveASTToShape(shape, data.astData, metadata);

		// –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å AST –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ UI
		let parsedAST;
		try {
			parsedAST = JSON.parse(data.astData);
		} catch (parseError) {
			console.warn("AST –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É");
			parsedAST = data.astData;
		}

		// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ UI
		sendMessage({
			type: "ast-generated",
			data: {
				astData: parsedAST,
				success: true,
			},
		});

		console.log("‚úÖ AST —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AST:", error);
		sendMessage({
			type: "ast-error",
			content: error.message,
		});
	}
}

function handleClearAST(shapeId: string): void {
	try {
		const shape = penpot.currentPage?.getShapeById(shapeId);
		if (shape) {
			shape.setPluginData("component-ast", "");
			console.log("‚úÖ AST –æ—á–∏—â–µ–Ω –¥–ª—è shape:", shapeId);
		}
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ AST:", error);
	}
}

/**
 * Handle generating React component from AST
 */
async function handleGenerateReactComponent(data: any): Promise<void> {
	try {
		console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...");

		const { astData, shapeId } = data;

		if (!astData) {
			throw new Error("AST –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
		}

		const shape = penpot.currentPage?.getShapeById(shapeId);
		if (!shape) {
			throw new Error("Shape –Ω–µ –Ω–∞–π–¥–µ–Ω");
		}

		// –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Claude API
		sendMessage({
			type: "generate-react-component-start",
			data: { astData, shapeId },
		});

		console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ UI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", error);
		sendMessage({
			type: "react-component-error",
			content: error.message,
		});
	}
}

/**
 * Handle saving React component to shape plugin data
 */
function handleSaveReactComponent(data: any): void {
	try {
		const { componentCode, shapeId } = data;
		const shape = penpot.currentPage?.getShapeById(shapeId);

		if (!shape) {
			throw new Error("Shape –Ω–µ –Ω–∞–π–¥–µ–Ω");
		}

		// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å storage service
		const metadata = {
			shapeInfo: {
				id: shapeId,
				name: shape.name || "Unnamed",
			},
		};

		saveReactComponentToShape(shape, componentCode, metadata);

		console.log("‚úÖ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", error);
		sendMessage({
			type: "react-component-error",
			content: error.message,
		});
	}
}

/**
 * Handle clearing React component from shape
 */
function handleClearReactComponent(shapeId: string): void {
	try {
		const shape = penpot.currentPage?.getShapeById(shapeId);
		if (shape) {
			removeReactComponentFromShape(shape);
			console.log("‚úÖ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—á–∏—â–µ–Ω –¥–ª—è shape:", shapeId);
		}
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", error);
	}
}
