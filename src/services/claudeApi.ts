import Anthropic from "@anthropic-ai/sdk";
import { uint8ArrayToBase64 } from "../utils/imageUtils";
import { ASTPromptService } from "./astPromptService";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Anthropic
const anthropic = new Anthropic({
	apiKey: import.meta.env.VITE_CLAUDE_API_KEY,
	dangerouslyAllowBrowser: true, // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
});

export const analyzeWithClaude = async (
	imageData: Uint8Array,
): Promise<string> => {
	const base64Image = uint8ArrayToBase64(imageData);
	const prompt = `
–ó–∞–¥–∞—á–∞: 
–ù–∞–ø–∏—à–∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. 
–≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —ç—Ç–æ shape –∏–∑ penpot. –≠—Ç—É –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —è –∏—Å–ø–æ–ª—å–∑—É—é –≤ –±—É–¥—É—â–µ–º —á—Ç–æ–±—ã –æ–ø–∏—Å–∞—Ç—å AST, –∞ –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—Ç—å ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ best practices.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è AST –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
1. –û–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

2. –°–∏—Å—Ç–µ–º–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
–†–∞–∑–º–µ—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (small, medium, large)
–°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (primary, secondary, outline)
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (with-icon, loading)

3. –ò–µ—Ä–∞—Ä—Ö–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏
Primary/secondary —ç–ª–µ–º–µ–Ω—Ç—ã
Default —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
–í–∏–∑—É–∞–ª—å–Ω—ã–π –≤–µ—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

4. –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (default, hover, focus, active, disabled)
–õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
–£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏

5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç, –∏–∫–æ–Ω–∫–∏, –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É

6. –°–µ–º–∞–Ω—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
ARIA —Ä–æ–ª–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
Screen reader –ø–æ–¥–¥–µ—Ä–∂–∫–∞
–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

7. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
UX –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
–¢–∏–ø–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, –æ–¥–Ω–∞–∫–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –û–ø–∏—Å—ã–≤–∞–π —Ç–æ, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
- css —Å—Ç–∏–ª–∏: —Ü–≤–µ—Ç–∞, —à—Ä–∏—Ñ—Ç—ã, —Ä–∞–∑–º–µ—Ä—ã –∏ —Ç.–¥.
- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ 
`;

	console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK...");

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 1000,
			messages: [
				{
					role: "user",
					content: [
						{
							type: "image",
							source: {
								type: "base64",
								media_type: "image/png",
								data: base64Image,
							},
						},
						{
							type: "text",
							text: prompt,
						},
					],
				},
			],
		});

		console.log("‚úÖ Claude response received via SDK");

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
		const textContent = message.content.find(
			(content) => content.type === "text",
		);
		return textContent?.text || "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude";
	} catch (error) {
		console.error("‚ùå Claude SDK Error:", error);
		throw new Error(`Claude API Error: ${error.message}`);
	}
};

export const generateASTWithClaude = async (
	htmlCode: string,
	cssCode: string,
	metaInfo: string,
): Promise<string> => {
	const astPromptService = new ASTPromptService();
	const prompt = astPromptService.generateASTPrompt(
		htmlCode,
		cssCode,
		metaInfo,
	);

	console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AST –≤ Claude API...");

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 2000,
			messages: [
				{
					role: "user",
					content: [
						{
							type: "text",
							text: prompt,
						},
					],
				},
			],
		});

		console.log("‚úÖ AST response received from Claude");

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
		const textContent = message.content.find(
			(content) => content.type === "text",
		);

		const rawResponse = textContent?.text || "No AST generated";

		// –î–û–ë–ê–í–ò–¢–¨ –æ—á–∏—Å—Ç–∫—É –æ—Ç markdown
		const cleanedResponse = rawResponse
			.replace(/```json\s*/g, "") // —É–±—Ä–∞—Ç—å ```json
			.replace(/```\s*/g, "") // —É–±—Ä–∞—Ç—å ```
			.trim(); // —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

		return cleanedResponse;
	} catch (error) {
		console.error("‚ùå Claude AST Error:", error);
		throw new Error(`Claude AST API Error: ${error.message}`);
	}
};
