import Anthropic from "@anthropic-ai/sdk";
import { uint8ArrayToBase64 } from "../utils/imageUtils";
import { ASTPromptService } from "./astPromptService";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Anthropic
const anthropic = new Anthropic({
	apiKey: import.meta.env.VITE_CLAUDE_API_KEY,
	dangerouslyAllowBrowser: true, // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
});

export const analyzeWithClaude = async (
	imageData: Uint8Array,
): Promise<string> => {
	const base64Image = uint8ArrayToBase64(imageData);
	const prompt = `
–ó–∞–¥–∞—á–∞: 
–ò–∑—É—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –≤–æ–æ–±—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –î–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ. 
–≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —ç—Ç–æ shape –∏–∑ penpot. –≠—Ç—É –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —è –∏—Å–ø–æ–ª—å–∑—É—é –≤ –±—É–¥—É—â–µ–º —á—Ç–æ–±—ã –æ–ø–∏—Å–∞—Ç—å AST, –∞ –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—Ç—å ui –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.

–ù–µ –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ css —Å—Ç–∏–ª–µ–π. 
`;

	console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK...");

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 1000,
			messages: [
				{
					role: "user",
					content: [
						{
							type: "image",
							source: {
								type: "base64",
								media_type: "image/png",
								data: base64Image,
							},
						},
						{
							type: "text",
							text: prompt,
						},
					],
				},
			],
		});

		console.log("‚úÖ Claude response received via SDK");

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
		const textContent = message.content.find(
			(content) => content.type === "text",
		);
		return textContent?.text || "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude";
	} catch (error) {
		console.error("‚ùå Claude SDK Error:", error);
		throw new Error(`Claude API Error: ${error.message}`);
	}
};

export const generateASTWithClaude = async (
	htmlCode: string,
	cssCode: string,
	metaInfo: string,
): Promise<string> => {
	const astPromptService = new ASTPromptService();
	const prompt = astPromptService.generateASTPrompt(
		htmlCode,
		cssCode,
		metaInfo,
	);

	console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AST –≤ Claude API...");

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 2000,
			messages: [
				{
					role: "user",
					content: [
						{
							type: "text",
							text: prompt,
						},
					],
				},
			],
		});

		console.log("‚úÖ AST response received from Claude");

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
		const textContent = message.content.find(
			(content) => content.type === "text",
		);

		const rawResponse = textContent?.text || "No AST generated";

		// –î–û–ë–ê–í–ò–¢–¨ –æ—á–∏—Å—Ç–∫—É –æ—Ç markdown
		const cleanedResponse = rawResponse
			.replace(/```json\s*/g, "") // —É–±—Ä–∞—Ç—å ```json
			.replace(/```\s*/g, "") // —É–±—Ä–∞—Ç—å ```
			.trim(); // —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

		return cleanedResponse;
	} catch (error) {
		console.error("‚ùå Claude AST Error:", error);
		throw new Error(`Claude AST API Error: ${error.message}`);
	}
};

export const generateReactComponentWithClaude = async (
	astData: string,
): Promise<string> => {
	const prompt = `–ó–∞–¥–∞—á–∞:
–°–æ–∑–¥–∞–π —Ä–µ–∞–∫—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–π ast. 
${astData}
–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è. –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π —ç—Ç–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. css —Å—Ç–∏–ª–∏, —Ä–µ–∞–∫—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç. –°–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - —ç—Ç–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.`;

	console.log(
		"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ Claude API...",
	);

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 4000,
			messages: [
				{
					role: "user",
					content: [
						{
							type: "text",
							text: prompt,
						},
					],
				},
			],
		});

		console.log("‚úÖ React Component response received from Claude");

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
		const textContent = message.content.find(
			(content) => content.type === "text",
		);

		const rawResponse = textContent?.text || "No React component generated";

		// –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown
		const cleanedResponse = rawResponse
			.replace(/```jsx\s*/g, "") // —É–±—Ä–∞—Ç—å ```jsx
			.replace(/```javascript\s*/g, "") // —É–±—Ä–∞—Ç—å ```javascript
			.replace(/```\s*/g, "") // —É–±—Ä–∞—Ç—å ```
			.trim(); // —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

		return cleanedResponse;
	} catch (error) {
		console.error("‚ùå Claude React Component Error:", error);
		throw new Error(`Claude React Component API Error: ${error.message}`);
	}
};

export const generateStorybookWithClaude = async (
	reactCode: string,
): Promise<string> => {
	const prompt = `–ó–∞–¥–∞—á–∞:
–°–æ–∑–¥–∞–π storybook —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∞ –†–µ–∞–∫—Ç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
${reactCode}
–°—Ç–æ—Ä–∏–±—É–∫ - —ç—Ç–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.`;

	console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Storybook –≤ Claude API...");

	try {
		const message = await anthropic.messages.create({
			model: "claude-sonnet-4-20250514",
			max_tokens: 4000,
			messages: [
				{
					role: "user",
					content: [
						{
							type: "text",
							text: prompt,
						},
					],
				},
			],
		});

		console.log("‚úÖ Storybook response received from Claude");

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
		const textContent = message.content.find(
			(content) => content.type === "text",
		);

		const rawResponse = textContent?.text || "No Storybook generated";

		// –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown
		const cleanedResponse = rawResponse
			.replace(/```typescript\s*/g, "") // —É–±—Ä–∞—Ç—å ```typescript
			.replace(/```javascript\s*/g, "") // —É–±—Ä–∞—Ç—å ```javascript
			.replace(/```jsx\s*/g, "") // —É–±—Ä–∞—Ç—å ```jsx
			.replace(/```\s*/g, "") // —É–±—Ä–∞—Ç—å ```
			.trim(); // —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

		return cleanedResponse;
	} catch (error) {
		console.error("‚ùå Claude Storybook Error:", error);
		throw new Error(`Claude Storybook API Error: ${error.message}`);
	}
};
